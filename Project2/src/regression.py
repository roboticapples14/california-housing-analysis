import pandas as pdimport numpy as npimport seaborn as snsimport matplotlib.pyplot as pltimport seaborn as snsfrom sklearn.decomposition import PCAimport osimport sklearn.linear_model as lmfrom matplotlib.pylab import figure, subplot, plot, xlabel, ylabel, hist, showdef mse(y_true, y_est):    summation = 0    n = len(y_true)    for i in range (0,n):  #looping through each element of the list        difference = y_true[i] - y_est[i]  #finding the difference between observed and predicted value        squared_difference = difference**2  #taking square of the differene         summation = summation + squared_difference  #taking a sum of all the differences    MSE = summation/n    return(MSE)    def testDivision(num_idx ,den_idx):    DATA_PATH = '../../data'    housing_df_raw = pd.read_csv(os.path.join(DATA_PATH, 'housing.csv'))    housing_df = housing_df_raw.dropna()        housing_df_numeric = housing_df.iloc[:, :housing_df.shape[1] - 1]        # m = entries, n = attributes    N, M = housing_df_numeric.shape        # normalize data    #df_normalized=(housing_df_numeric - housing_df_numeric.mean()) / housing_df_numeric.std()    X = housing_df_numeric.values                            # Split dataset into features and target vector    med_inc_index = 7    y = X[:,med_inc_index]        X_cols = list(range(0,med_inc_index)) + list(range(med_inc_index+1,M))    X = X[:,X_cols]                        bedroom_idx = 4    pop_idx=5    X_add = (X[:,num_idx]/X[:,den_idx]).reshape(-1,1)        X = np.asarray(np.bmat('X, X_add'))                #adds a ones matrix to X    ones_matrix = np.ones((N,1))    X = np.asarray(np.bmat('ones_matrix, X'))                # Fit ordinary least squares regression model    model = lm.LinearRegression()    model.fit(X,y)        # Predict alcohol content    y_est = model.predict(X)    coefs= model.coef_    residual = y_est-y            # Display scatter plot    #figure()    #subplot(2,1,1)    #plot(y, y_est, '.')    #xlabel('Median Income (true)'); ylabel('Median Income (estimated)');    #subplot(2,1,2)    #hist(residual,40)        #show()    print()    print('With numerator '+ str(num_idx)+' and denominator '+str(den_idx))    print('The error in the training data is : {0:.4f}'.format(mse(y,y_est)))    #The error w/o any manipulation is 1.226, witbh j rooms, bedrooms,     #and ppl per house it is .9276, and if we add the same measures per person    #it goes down to .8987    return(mse(y,y_est))def testMultiplication(num_idx ,den_idx):    DATA_PATH = '../../data'    housing_df_raw = pd.read_csv(os.path.join(DATA_PATH, 'housing.csv'))    housing_df = housing_df_raw.dropna()        housing_df_numeric = housing_df.iloc[:, :housing_df.shape[1] - 1]        # m = entries, n = attributes    N, M = housing_df_numeric.shape        # normalize data    #df_normalized=(housing_df_numeric - housing_df_numeric.mean()) / housing_df_numeric.std()    X = housing_df_numeric.values                            # Split dataset into features and target vector    med_inc_index = 7    y = X[:,med_inc_index]        X_cols = list(range(0,med_inc_index)) + list(range(med_inc_index+1,M))    X = X[:,X_cols]                        bedroom_idx = 4    pop_idx=5    X_add = (X[:,num_idx]*X[:,den_idx]).reshape(-1,1)        X = np.asarray(np.bmat('X, X_add'))                #adds a ones matrix to X    ones_matrix = np.ones((N,1))    X = np.asarray(np.bmat('ones_matrix, X'))                # Fit ordinary least squares regression model    model = lm.LinearRegression()    model.fit(X,y)        # Predict alcohol content    y_est = model.predict(X)    coefs= model.coef_    residual = y_est-y            # Display scatter plot    #figure()    #subplot(2,1,1)    #plot(y, y_est, '.')    #xlabel('Median Income (true)'); ylabel('Median Income (estimated)');    #subplot(2,1,2)    #hist(residual,40)        #show()    print()    print('With multiple '+ str(num_idx)+' and multiple '+str(den_idx))    print('The error in the training data is : {0:.4f}'.format(mse(y,y_est)))    #The error w/o any manipulation is 1.226, witbh j rooms, bedrooms,     #and ppl per house it is .9276, and if we add the same measures per person    #it goes down to .8987    return(mse(y,y_est))      matrix = np.zeros( (8, 8) )for i in range(8):    for j in range(8):        matrix[i,j] = testDivision(i,j)figure()sns.heatmap(matrix, annot=False, cmap='coolwarm')show()print()print()print()print()for i in range(8):    for j in range(8):        matrix[i,j] = testMultiplication(i,j)figure()sns.heatmap(matrix, annot=False, cmap='coolwarm')show()                        